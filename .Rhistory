library(janitor)
janitor::top_levels(sims[1:20,1])
janitor::top_levels(sims[1:20,3])
tibble(sims %>% transpose())
sims
tibble(sims)
tibble(sims) %>% transpose()
tibble(tibble(sims) %>% transpose())
library(here)
library(rstan)
library(tidyverse)
library(ggplot2)
library(bayesplot)
library(parallel)
library(tibble)
library(purrr)
df = read.csv(here('premierleague1920.csv'))
df_past = df %>% filter(!is.na(xG))
df_past = df_past %>%
mutate(h_g = as.integer(as.factor(Home)),
a_g = as.integer(as.factor(Away))) %>%
separate(Score, c('y_g1', 'y_g2'), sep='â€“') %>%
mutate(g = seq.int(nrow(df_past))) %>%
mutate(h_g = as.integer(h_g), a_g = as.integer(a_g), y_g1 = as.integer(y_g1), y_g2 = as.integer(y_g2))
df_future = df %>% filter(is.na(xG))
df_future = df_future %>%
mutate(h_g = as.integer(as.factor(Home)),
a_g = as.integer(as.factor(Away))) %>%
mutate(g = seq.int(nrow(df_future))) %>%
mutate(h_g = as.integer(h_g), a_g = as.integer(a_g))
stan_data = list(
G = nrow(df_past),
N_TEAMS = max(df_past$h_g),
h_g = df_past$h_g,
a_g = df_past$a_g,
y_g1 = df_past$y_g1,
y_g2 = df_past$y_g2,
PRED_G = nrow(df_future),
future_h_g = df_future$h_g,
future_a_g = df_future$a_g
)
mod = stan(data = stan_data,
file = here::here("model.stan"),
iter = 4000,
seed = 123,
cores=4)
summary = df_past %>%
group_by(h_g) %>%
summarise(team = first(Home)) %>%
mutate(attack_mean = summary(mod)$summary[6:25,1]) %>%
mutate(defense_mean = summary(mod)$summary[26:45,1])
df_past
# home_points = df_past %>%
#   group_by(Wk, h_g) %>%
#   summarise(team = first(Home),
#             home_points = cumsum(case_when(
#     y_g1 > y_g2 ~ 3,
#     y_g1 == y_g2 ~ 1,
#     y_g1 < y_g2 ~ 0
#   ))) %>%
#   group_by(h_g) %>%
#   summarise(cum_sum = cumsum(home_points))
#
# away_points = df_past %>%
#   group_by(Wk, a_g) %>%
#   summarise(team = first(Away),
#             away_points = sum(case_when(
#     y_g1 < y_g2 ~ 3,
#     y_g1 == y_g2 ~ 1,
#     y_g1 > y_g2 ~ 0
#   )))
home_points = df_past %>%
group_by(h_g) %>%
summarise(team = first(Home),
home_points = sum(case_when(
y_g1 > y_g2 ~ 3,
y_g1 == y_g2 ~ 1,
y_g1 < y_g2 ~ 0
)))
away_points = df_past %>%
group_by(a_g) %>%
summarise(team = first(Away),
away_points = sum(case_when(
y_g1 < y_g2 ~ 3,
y_g1 == y_g2 ~ 1,
y_g1 > y_g2 ~ 0
)))
summary$points = away_points$away_points + home_points$home_points
summary %>%
ggplot() + geom_point(aes(x=reorder(team, attack_mean), y=attack_mean), color='red') + coord_flip()
summary %>%
ggplot() + geom_point(aes(x=reorder(team, -defense_mean), y=defense_mean), color='blue') + coord_flip()
summary %>%
ggplot() + geom_point(aes(x=reorder(team, points), y=points)) + coord_flip()
y_g1_pred = rstan::extract(mod)[['y_g1_pred']]
y_g2_pred = rstan::extract(mod)[['y_g2_pred']]
ncol(y_g2_pred)
sims = matrix(0, nrow=20, ncol=8000)
score_diffs = y_g1_pred - y_g2_pred
for (i in 1:8000){
for (j in 1:92){
a = score_diffs[i,j]
if (a > 0){
sims[df_future[j,'h_g'],i] =  sims[df_future[j,'h_g'],i] + 3
}
if (a < 0){
sims[df_future[j,'a_g'],i] =  sims[df_future[j,'a_g'],i] + 3
}
if (a == 0){
sims[df_future[j,'h_g'],i] =  sims[df_future[j,'h_g'],i] + 1
sims[df_future[j,'a_g'],i] =  sims[df_future[j,'a_g'],i] + 1
}
}
sims[1:20,i] = sims[1:20,i] + summary$points
}
summary
for (i in 1:8000){
sims[1:20, i]
}
j = 0
for (i in 1:8000){
if (max(sims[1:20,i]) == sims[10, i]){
j = j+1
}
}
j
summary$total_points = sims[1:20, 1]
summary
summary %>% sort(total_points)
summary
summary %>% sort(points)
summary %>% sort(points, decreasing=1)
summary %>% sort(points, decreasing=TRUE)
summary %>% order_by(total_points)
summary %>% arrange(total_points)
summary %>% arrange(-total_points)
summary %>% arrange(-total_points) %>% select(team)
summary %>% arrange(-total_points) %>% top_n(team, 4)
topsummary %>% arrange(-total_points)
top_n(summary, 4, -total_points)
top_n(summary, 4, total_points)
top_n(summary, 4, total_points)
top_n(summary, 4, -total_points)
top_n(summary, 4, total_points)
top_n(summary, 4, total_points) %>% team
top_n(summary, 4, total_points)$team
a = top_n(summary, 4, total_points)
a$team
a
a$team
a$team[1]
a$team[1:4]
summary
summary %>% arrange(-total_points)
a = summary %>% arrange(-total_points)
a[1:4,]
a$team
a$team[1:4]
a$team[1:4,]
a$team[1:4]
a$team
a$team %>% top_n(4)
a %>% top_n
a %>% top_n(4)
top_n(summary, 4, total_points)
top_n(summary, 4, total_points)$team
list(top_n(summary, 4, total_points)$team)
list(top_n(summary, 4, total_points)$team)[1]
list(top_n(summary, 4, total_points)$team)[[1]]
list(top_n(summary, 4, total_points)$team)[[1]][1]
list(top_n(summary, 4, total_points)$team)[[1]]
array(top_n(summary, 4, total_points)$team)
top_4_finishers = matrix(NA, nrow=8000, ncol=1)
for (i in 1:8000){
summary$total_points = sims[1:20, i]
top_4_finsihers[i,1] = array(top_n(summary, 4, total_points)$team)
}
top_4_finishers = matrix(NA, nrow=8000, ncol=1)
for (i in 1:8000){
summary$total_points = sims[1:20, i]
top_4_finishers[i,1] = array(top_n(summary, 4, total_points)$team)
}
top_4_finishers = matrix(NA, nrow=8000, ncol=4)
for (i in 1:8000){
summary$total_points = sims[1:20, i]
top_4_finishers[i,1] = array(top_n(summary, 4, total_points)$team)
}
top_4_finishers = matrix(NA, nrow=4, ncol=8000)
for (i in 1:8000){
summary$total_points = sims[1:20, i]
top_4_finishers[i,1] = array(top_n(summary, 4, total_points)$team)
}
top_4_finishers = matrix(NA, nrow=8000, ncol=4)
for (i in 1:8000){
summary$total_points = sims[1:20, i]
top_4_finishers[i,1:4] = array(top_n(summary, 4, total_points)$team)
}
top_4_finishers = matrix(NA, nrow=4, ncol=8000)
for (i in 1:8000){
summary$total_points = sims[1:20, i]
top_4_finishers[1:4,i] = array(top_n(summary, 4, total_points)$team)
}
array(top_n(summary, 4, total_points)$team)
top_4_finishers = matrix(NA, nrow=4, ncol=8000)
for (i in 1:8000){
summary$total_points = sims[1:20, i]
top_4_finishers[1:5,i] = array(top_n(summary, 4, total_points)$team)
}
summary
df_past
home_points = df_past %>%
group_by(h_g) %>%
summarise(team = first(Home),
home_points = sum(case_when(
y_g1 > y_g2 ~ 3,
y_g1 == y_g2 ~ 1,
y_g1 < y_g2 ~ 0
))) %>%
summarise(goals_against=sum(y_g2)) %>%
summarise(goals_forced=sum(y_g1))
home_points = df_past %>%
group_by(h_g) %>%
summarise(team = first(Home),
home_points = sum(case_when(
y_g1 > y_g2 ~ 3,
y_g1 == y_g2 ~ 1,
y_g1 < y_g2 ~ 0
)),
goals_against=sum(y_g2)) %>%
summarise(goals_forced=sum(y_g1))
home_points = df_past %>%
group_by(h_g) %>%
summarise(team = first(Home),
home_points = sum(case_when(
y_g1 > y_g2 ~ 3,
y_g1 == y_g2 ~ 1,
y_g1 < y_g2 ~ 0
)),
goals_against=sum(y_g2),
goals_forced=sum(y_g1))
away_points = df_past %>%
group_by(a_g) %>%
summarise(team = first(Away),
away_points = sum(case_when(
y_g1 < y_g2 ~ 3,
y_g1 == y_g2 ~ 1,
y_g1 > y_g2 ~ 0
))) %>%
summarise(goals_against=sum(y_g1)) %>%
summarise(goals_forced=sum(y_g2))
home_points = df_past %>%
group_by(h_g) %>%
summarise(team = first(Home),
home_points = sum(case_when(
y_g1 > y_g2 ~ 3,
y_g1 == y_g2 ~ 1,
y_g1 < y_g2 ~ 0
)),
goals_against=sum(y_g2),
goals_forced=sum(y_g1))
away_points = df_past %>%
group_by(a_g) %>%
summarise(team = first(Away),
away_points = sum(case_when(
y_g1 < y_g2 ~ 3,
y_g1 == y_g2 ~ 1,
y_g1 > y_g2 ~ 0
)),
goals_against=sum(y_g1),
goals_forced=sum(y_g2))
summary$points = away_points$away_points + home_points$home_points
summary$goals_against = away_points$goals_against + home_points$goals_against
summary$goals_forced = away_points$goals_forced + home_points$goals_forced
summary
summary
summary$points = away_points$away_points + home_points$home_points
summary$goals_against = away_points$goals_against + home_points$goals_against
summary$goals_forced = away_points$goals_forced + home_points$goals_forced
summar$goal_differential = summary$goals_forced - goals_against
summary$points = away_points$away_points + home_points$home_points
summary$goals_against = away_points$goals_against + home_points$goals_against
summary$goals_forced = away_points$goals_forced + home_points$goals_forced
summar$goal_differential = summary$goals_forced - summary$goals_against
summary$points = away_points$away_points + home_points$home_points
summary$goals_against = away_points$goals_against + home_points$goals_against
summary$goals_forced = away_points$goals_forced + home_points$goals_forced
summary$goal_differential = summary$goals_forced - summary$goals_against
summary
y_g1_pred
point_sims = matrix(0, nrow=20, ncol=8000)
goal_diff_sims = matrix(0, nrow=20, ncol=8000)
score_diffs = y_g1_pred - y_g2_pred
for (i in 1:8000){
for (j in 1:92){
a = score_diffs[i,j]
if (a > 0){
point_sims[df_future[j,'h_g'],i] =  point_sims[df_future[j,'h_g'],i] + 3
}
if (a < 0){
point_sims[df_future[j,'a_g'],i] =  point_sims[df_future[j,'a_g'],i] + 3
}
if (a == 0){
point_sims[df_future[j,'h_g'],i] =  point_sims[df_future[j,'h_g'],i] + 1
point_sims[df_future[j,'a_g'],i] =  point_sims[df_future[j,'a_g'],i] + 1
}
goal_diff_sims[df_future[j,'h_g'],i] = goal_diff_sims[df_future[j,'h_g'],i] + a
goal_diff_sims[df_future[j,'a_g'],i] = goal_diff_sims[df_future[j,'a_g'],i] + a
}
point_sims[1:20,i] = point_sims[1:20,i] + summary$points
goal_diff_sims[1:20, i] = goal_diff_sims[1:20, i] + summary$goal_differential
}
goal_diff_sims
goal_diff_sims[1:20, 1:5]
summary
points_sims[1:20, 1:5]
points_sims[1:20, 1:5]
point_sims[1:20, 1:5]
goal_diff_sims[1:20, 1:5]
summary$total_points = sims[1:20, 1]
summary
summary %>% arrange(total_points, goal_differential)
summary %>% arrange(-total_points, -goal_differential)
summary %>% arrange(-total_points, -goal_differential) %>% select(team)
a = summary %>% arrange(-total_points, -goal_differential) %>% select(team)
a
a[1:4]
a %>% head()
a %>% head(4)
a = summary %>% arrange(-total_points, -goal_differential) %>% select(team) %>% push()
a = summary %>% arrange(-total_points, -goal_differential) %>% select(team) %>% put()
a %>% head(4) %>% pull()
array(a %>% head(4) %>% pull())
array(a %>% head(4))
array(a %>% head(4) %>% pull())
summary %>%
arrange(-total_points, -goal_differential) %>%
select(team) %>%
head(4)
summary %>%
arrange(-total_points, -goal_differential) %>%
select(team) %>%
head(4) %>%
arrange(team)
summary %>%
arrange(-total_points, -goal_differential) %>%
select(team) %>%
head(4) %>%
a = array(summary %>%
arrange(-total_points, -goal_differential) %>%
select(team) %>%
head(4) %>%
arrange(team) %>%
pull())
a
stri_join_list(a, sep='-')
library(stringi)
stri_join_list(a, sep='-')
list(a)
stri_join_list(list(a), sep='-')
,
stri_join_list(list(a), sep=',')
stri_join_list(list(a), sep=', ')
top_4_finishers = matrix(NA, nrow=8000, ncol=1)
for (i in 1:8000){
summary$total_points = point_sims[1:20, i]
summary$goal_differential = goal_diff_sims[1:20, i]
a = list(array(summary %>%
arrange(-total_points, -goal_differential) %>%
select(team) %>%
head(4) %>%
arrange(team) %>%
pull()))
top_4 = stri_join_list(a, sep=', ')
top_4_finishers[i] = top_4
}
top_4_finishers
as_tibble(top_4_finishers)
a = as_tibble(top_4_finishers)
a %>% group_by(V1) %>% summarise(nrow)
a = as_tibble(top_4_finishers)
a %>% group_by(V1) %>% summarise(n())
a = as_tibble(top_4_finishers)
a %>% group_by(V1) %>% summarise(freq = n()) %>% arrange(freq)
a = as_tibble(top_4_finishers)
a %>% group_by(V1) %>% summarise(freq = n()) %>% arrange(-freq)
a = as_tibble(top_4_finishers)
a %>% group_by(V1) %>% summarise(freq = n(), percentage=n()/8000.) %>% arrange(-freq)
a
top_4_finishers
a
library(pracma)
strfind('abcdef', 'abc')
strfind('abcdef', 'bcd')
strfind('abcdef', 'xyz')
a %>% group_by(V1) %>% summarise(freq = n(), percentage=n()/8000.) %>% arrange(-freq) %>%
ggplot() + geom_hist(aes(x=V1, y=percentage))
a %>% group_by(V1) %>% summarise(freq = n(), percentage=n()/8000.) %>% arrange(-freq) %>%
ggplot() + geom_histogram(aes(x=V1, y=percentage))
a %>% group_by(V1) %>% summarise(freq = n(), percentage=n()/8000.) %>% arrange(-freq) %>%
ggplot() + geom_bar(aes(x=V1, y=percentage))
a %>% group_by(V1) %>% summarise(freq = n(), percentage=n()/8000.) %>% arrange(-freq) %>%
ggplot() + geom_point(aes(x=V1, y=percentage))
a %>% group_by(V1) %>% summarise(freq = n(), percentage=n()/8000.) %>% arrange(-freq) %>%
ggplot() + geom_point(aes(x=V1, y=percentage)) + coord_flip()
a %>% group_by(V1) %>% summarise(freq = n(), percentage=n()/8000.) %>% arrange(-freq) %>%
ggplot() + geom_point(aes(x=reorder(V1, percentage), y=percentage)) + coord_flip()
summary %>%
arrange(-total_points, -goal_differential
)
a = list(array(summary %>%
arrange(-total_points, -goal_differential) %>%
select(h_g) %>%
head(4) %>%
arrange(team) %>%
pull()))
a = list(array(summary %>%
arrange(-total_points, -goal_differential) %>%
select(h_g) %>%
head(4) %>%
pull()))
a
for (i in a){i}
k=0
for (i in a){k = k + i}
k
for (i in a[[1]]){k = k + i}
k
i
i[1]
i[[1]]
as.intager(i)
as.integer(i)
for (i in a){}
for (i in a){
print(i)
}
for (i in a){
a
a
iter(a)
1:5
a
list(a)
a
a[[1]]
for i in a[[1]]{
for (i in a[[1]]){print(i)}
a = list(array(summary %>%
arrange(-total_points, -goal_differential) %>%
select(h_g) %>%
head(4) %>%
arrange(team) %>%
pull()))
a = list(array(summary %>%
arrange(-total_points, -goal_differential) %>%
select(h_g) %>%
head(4) %>%
arrange(h_g) %>%
pull()))
a
top_4_finishers = matrix(NA, nrow=20, ncol=1)
for (i in 1:1){
summary$total_points = point_sims[1:20, i]
summary$goal_differential = goal_diff_sims[1:20, i]
a = list(array(summary %>%
arrange(-total_points, -goal_differential) %>%
select(h_g) %>%
head(4) %>%
pull()))
for (i in a[[1]]){
top_4_finishers[i] = top_4_finishers[i] + 1
}
}
top_4_finishers
top_4_finishers = matrix(0, nrow=20, ncol=1)
for (i in 1:1){
summary$total_points = point_sims[1:20, i]
summary$goal_differential = goal_diff_sims[1:20, i]
a = list(array(summary %>%
arrange(-total_points, -goal_differential) %>%
select(h_g) %>%
head(4) %>%
pull()))
for (i in a[[1]]){
top_4_finishers[i] = top_4_finishers[i] + 1
}
}
top_4_finishers
top_4_finishers = matrix(0, nrow=20, ncol=1)
for (i in 1:8000){
summary$total_points = point_sims[1:20, i]
summary$goal_differential = goal_diff_sims[1:20, i]
a = list(array(summary %>%
arrange(-total_points, -goal_differential) %>%
select(h_g) %>%
head(4) %>%
pull()))
for (i in a[[1]]){
top_4_finishers[i] = top_4_finishers[i] + 1
}
}
top_4_finishers / 8000.
top_4_finishers
top_4_finishers
top_4_finishers / 8000.
summary$prob_top_4 = top_4_finishers / 8000.
summary %>%
ggplot() + geom_point(aes(x=team, y=prob_top_4))
summary %>%
ggplot() + geom_point(aes(x=team, y=prob_top_4)) + coord_flip()
summary %>%
ggplot() + geom_point(aes(x=reorder(team, prob_top_4), y=prob_top_4)) + coord_flip()
